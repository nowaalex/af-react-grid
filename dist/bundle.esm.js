import t from"react";import s from"prop-types";import{DraggableCore as e}from"react-draggable";import i from"react-dom";import r from"classnames";const n=({className:s,type:i,style:r,index:n,onDrag:o,onStart:h,disabled:a})=>t.createElement(e,{onStart:h,onDrag:o,disabled:a},t.createElement("div",{className:s||"react-rsz-grid-default-resizer","data-resizer-index":n,"data-resizer-type":i,style:r}));n.propTypes={type:s.oneOf(["row","col"]),onDrag:s.func,onStart:s.func,index:s.number,className:s.oneOfType([s.array,s.string,s.object]),baseClassName:s.oneOfType([s.array,s.string,s.object])};const o={row:{className:"react-rsz-grid-row",ptr:"pageX",dim:"clientWidth",prop:"width",min:"minWidth",max:"maxWidth"},col:{className:"react-rsz-grid-col",ptr:"pageY",dim:"clientHeight",prop:"height",min:"minHeight",max:"maxHeight"}},h=(t,s={})=>e=>s[e]||(s[e]=t(e)),a=(t,s,e)=>t>e?e:t<s?s:t,c=(t,s)=>{let e,i=!1;const r=()=>i=!1,n=()=>clearTimeout(e),o=()=>{i||(t.apply(null,arguments),i=!0,n(),e=setTimeout(r,s))};return o.cancel=n,o};class m extends t.Component{constructor(...s){super(...s),this.state={},this.t=[],this.onStart=(t=>{"development"===process.env.NODE_ENV&&console.log("onStart",t);const s=this.s=+t.target.getAttribute("data-resizer-index"),{ptr:e}=o[this.props.type];this.e=t[e],this.i(s-1,1),this.i(s+1,2);const i=this._curD1+this._curD2;this._maxD1||(this._maxD1=i-this._minD2),this._maxD2||(this._maxD2=i-this._minD1)}),this.onDrag=(t=>{"development"===process.env.NODE_ENV&&console.log("onDrag",t);const{ptr:s,prop:e}=o[this.props.type],i=t[s]-this.e;this.setState(t=>this.r(t,e,i))}),this.n=h(t=>s=>{this.t[t]=s?i.findDOMNode(s):null}),this.o=((s,e)=>{if(!s)return s;const{type:i,props:r}=s;if(i===t.Fragment)throw new Error("Fragments are not supported in ResizableFlexGrid right now.");return t.cloneElement(s,i===n?{index:e,onDrag:this.onDrag,onStart:this.onStart,type:this.props.type}:{style:r.style?Object.assign({},r.style,this.state[e]):this.state[e],ref:this.n(e)})}),this.h=((t,{type:s})=>{const{prop:e,dim:i}=o[s];return this.t.reduce((s,r,n)=>(r&&(s[n]=Object.assign({},t[n],{[e]:r[i]})),s),{})}),this.a=c(()=>this.setState(this.h),150)}i(t,s){const e=this.t[t],{max:i,min:r,dim:n}=o[this.props.type],h=getComputedStyle(e);this["_curD"+s]=e[n],this["_minD"+s]=parseInt(h[r],10)||0,this["_maxD"+s]=parseInt(h[i],10)||0}r(t,s,e){const i=this.s;return{[i-1]:Object.assign({},t[i-1],{[s]:a(this._curD1+e,this._minD1,this._maxD1)}),[i+1]:Object.assign({},t[i+1],{[s]:a(this._curD2-e,this._minD2,this._maxD2)})}}render(){const{type:s,className:e,children:i,style:n}=this.props;return t.createElement("div",{style:n,className:r(e,o[s].className),children:t.Children.map(i,this.o)})}componentDidMount(){this.a(),window.addEventListener("resize",this.a)}componentDidUpdate({children:s}){const{children:e}=this.props,i=t.Children.count(s),r=t.Children.count(e);i!==r&&(i>r&&this.t.splice(r),this.a())}componentWillUnmount(){window.removeEventListener("resize",this.a),this.a.cancel()}}m.propTypes={type:s.oneOf(["row","col"]).isRequired,className:s.string,resizerClassName:s.string,children:s.node};export{m as Container,n as Resizer};
